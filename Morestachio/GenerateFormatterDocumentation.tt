<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".md" #>
Morestachio brings a number of predefined formatter that can be overwritten by simply setting a custom formatter with the same name. 
See https://github.com/JPVenson/morestachio/wiki/Formatter#formatter-framework for custom formatters.

> Please note that this section of the wiki is autogenerated via https://github.com/JPVenson/morestachio/blob/master/Morestachio/GenerateFormatterDocumentation.tt
> All PRs updating this Wiki page alone will be rejected

<# 
var workingDirectory = new string[] 
	{
		@"H:\Code\morestachio\Morestachio",
		@"H:\Code\morestachio\Morestachio.Linq"
	};
var searchHeader = new Regex(@"\[MorestachioFormatter\(""([^""]*)""\s*(?:,\s*""(.*)"")?\)\]\s*public static ([^(]*) [^(]*\(([^)]*)\)");

foreach(var dir in workingDirectory){

#>## Project: <#= dir.Split('\\').Last() #>
<#

	var csFiles = Directory.EnumerateFiles(dir, "*.cs", SearchOption.AllDirectories);
	foreach(var csFile in csFiles)
	{
		var matches = searchHeader.Matches(File.ReadAllText(csFile));

		if(matches.Count > 0){
#>
### class <#= Path.GetFileName(csFile) #>
<#
		}

		foreach(Match match in matches){
#>
FormatterName: <#= match.Groups[1].Value #>  
Arguments:  
<#
		if(match.Groups[4].Value != null)
		{
			foreach(var argument in match.Groups[4].Value.Split(','))
			{
				var arg = argument.Trim();
				var indexOfTypeSeperator = arg.LastIndexOf(' ');
#>- <#= arg.Substring(0,indexOfTypeSeperator).Trim() #>: <#= arg.Substring(indexOfTypeSeperator).Trim() #>  
<#  
			}
		}
		
#>

Returns: <#= match.Groups[3].Value #>  
Description:  
<#= match.Groups[2].Value #>  
***

<#
		}
	}
}
#>
