#if ValueTask
using MorestachioDocumentResultPromise = System.Threading.Tasks.ValueTask<Morestachio.MorestachioDocumentResult>;
#else
using MorestachioDocumentResultPromise = System.Threading.Tasks.Task<Morestachio.MorestachioDocumentResult>;
#endif
using System;
using System.Linq;
using System.Threading;
using Morestachio.Document;
using Morestachio.Document.Contracts;
using Morestachio.Document.Items;
using Morestachio.Profiler;

namespace Morestachio.Rendering
{
	/// <summary>
	///     Renders as <see cref="IDocumentItem" /> with a given object
	/// </summary>
	public class Renderer : IRenderer
	{
		/// <summary>
		/// 
		/// </summary>
		/// <param name="document"></param>
		/// <param name="parserOptions"></param>
		/// <param name="captureVariables"></param>
		public Renderer(IDocumentItem document, ParserOptions parserOptions, bool captureVariables) : this(
			parserOptions, captureVariables)
		{
			Document = document;
		}
		
		private Renderer(ParserOptions parserOptions, bool captureVariables)
		{
			CaptureVariables = captureVariables;
			ParserOptions = parserOptions;
		}
		
		/// <summary>
		///		If enabled will output all variables set in the template in the <see cref="MorestachioDocumentResult.CapturedVariables"/>
		/// </summary>
		public bool CaptureVariables { get; }

		/// <summary>
		///     The parser Options object that was used to create the Template Delegate
		/// </summary>
		public ParserOptions ParserOptions { get; }

		
		/// <summary>
		///		The Morestachio Document generated by the <see cref="Parser"/>
		/// </summary>
		public IDocumentItem Document { get; }
		
		/// <inheritdoc />
		public virtual void PreRender()
		{

		}
		
		/// <inheritdoc />
		public virtual void PostRender()
		{

		}

		/// <inheritdoc />
		public virtual async MorestachioDocumentResultPromise RenderAsync(object data, CancellationToken cancellationToken)
		{
			return await Render(data, cancellationToken, async (stream, context, scopeData) =>
			{
				await MorestachioDocument.ProcessItemsAndChildren(new[] {Document}, stream,
					context, scopeData);
			});
		}

		/// <summary>
		///		Helper for managing cancelation, Timeout and result creation
		/// </summary>
		/// <param name="data"></param>
		/// <param name="token"></param>
		/// <param name="executer"></param>
		/// <returns></returns>
		protected virtual async MorestachioDocumentResultPromise Render(object data,
			CancellationToken token,
			Compilation executer)
		{
			PreRender();
			var timeoutCancellation = new CancellationTokenSource();
			if (ParserOptions.Timeout != TimeSpan.Zero)
			{
				timeoutCancellation.CancelAfter(ParserOptions.Timeout);
				var anyCancellationToken =
					CancellationTokenSource.CreateLinkedTokenSource(token, timeoutCancellation.Token);
				token = anyCancellationToken.Token;
			}

			PerformanceProfiler profiler = null;
			using (var byteCounterStream = ParserOptions.StreamFactory.GetByteCounterStream(ParserOptions))
			{
				var context = ParserOptions.CreateContextObject("", data);
				var scopeData = new ScopeData(token);
				try
				{
					if (ParserOptions.ProfileExecution)
					{
						scopeData.Profiler = profiler = new PerformanceProfiler(true);
					}

					await executer(byteCounterStream, context, scopeData);

					if (timeoutCancellation.IsCancellationRequested)
					{
						throw new TimeoutException(
							$"The requested timeout of '{ParserOptions.Timeout:g}' for template generation was reached.");
					}
				}
				finally
				{
					if (!CaptureVariables)
					{
						scopeData.Dispose();
						scopeData.Variables.Clear();
					}
				}

				PostRender();
				return new MorestachioDocumentResult(byteCounterStream,
					profiler,
					scopeData.Variables.ToDictionary(e => e.Key, e => scopeData.GetFromVariable(null, e.Value)?.Value));
			}
		}
	}
}