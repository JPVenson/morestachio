//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Morestachio.Attributes;
using Morestachio.Formatter.Framework;
using Morestachio.Helper;

namespace Morestachio.Formatter.Predefined
{
	public static partial class NumberFormatter
	{
		[MorestachioFormatter("Add", "Adds two numbers")]
		public static Number Add(Number left, Number right)
		{
			return left.Add(right);
		}


		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static int Add([SourceObject]short left, short right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static int Substract([SourceObject]short left, short right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static int Divide([SourceObject]short left, short right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]short left, short right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]short left, short right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]short left, short right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]short left, short right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static int Add([SourceObject]short left, int right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static int Substract([SourceObject]short left, int right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static int Divide([SourceObject]short left, int right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]short left, int right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]short left, int right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]short left, int right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]short left, int right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static long Add([SourceObject]short left, long right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static long Substract([SourceObject]short left, long right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static long Divide([SourceObject]short left, long right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]short left, long right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]short left, long right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]short left, long right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]short left, long right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static decimal Add([SourceObject]short left, decimal right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static decimal Substract([SourceObject]short left, decimal right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static decimal Divide([SourceObject]short left, decimal right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]short left, decimal right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]short left, decimal right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]short left, decimal right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]short left, decimal right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static double Add([SourceObject]short left, double right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static double Substract([SourceObject]short left, double right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static double Divide([SourceObject]short left, double right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]short left, double right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]short left, double right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]short left, double right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]short left, double right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static int Add([SourceObject]int left, short right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static int Substract([SourceObject]int left, short right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static int Divide([SourceObject]int left, short right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]int left, short right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]int left, short right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]int left, short right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]int left, short right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static int Add([SourceObject]int left, int right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static int Substract([SourceObject]int left, int right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static int Divide([SourceObject]int left, int right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]int left, int right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]int left, int right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]int left, int right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]int left, int right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static long Add([SourceObject]int left, long right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static long Substract([SourceObject]int left, long right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static long Divide([SourceObject]int left, long right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]int left, long right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]int left, long right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]int left, long right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]int left, long right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static decimal Add([SourceObject]int left, decimal right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static decimal Substract([SourceObject]int left, decimal right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static decimal Divide([SourceObject]int left, decimal right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]int left, decimal right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]int left, decimal right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]int left, decimal right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]int left, decimal right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static double Add([SourceObject]int left, double right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static double Substract([SourceObject]int left, double right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static double Divide([SourceObject]int left, double right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]int left, double right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]int left, double right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]int left, double right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]int left, double right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static long Add([SourceObject]long left, short right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static long Substract([SourceObject]long left, short right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static long Divide([SourceObject]long left, short right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]long left, short right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]long left, short right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]long left, short right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]long left, short right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static long Add([SourceObject]long left, int right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static long Substract([SourceObject]long left, int right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static long Divide([SourceObject]long left, int right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]long left, int right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]long left, int right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]long left, int right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]long left, int right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static long Add([SourceObject]long left, long right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static long Substract([SourceObject]long left, long right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static long Divide([SourceObject]long left, long right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]long left, long right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]long left, long right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]long left, long right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]long left, long right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static decimal Add([SourceObject]long left, decimal right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static decimal Substract([SourceObject]long left, decimal right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static decimal Divide([SourceObject]long left, decimal right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]long left, decimal right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]long left, decimal right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]long left, decimal right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]long left, decimal right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static double Add([SourceObject]long left, double right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static double Substract([SourceObject]long left, double right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static double Divide([SourceObject]long left, double right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]long left, double right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]long left, double right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]long left, double right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]long left, double right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static decimal Add([SourceObject]decimal left, decimal right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static decimal Substract([SourceObject]decimal left, decimal right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static decimal Divide([SourceObject]decimal left, decimal right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]decimal left, decimal right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]decimal left, decimal right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]decimal left, decimal right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]decimal left, decimal right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static decimal Add([SourceObject]decimal left, short right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static decimal Substract([SourceObject]decimal left, short right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static decimal Divide([SourceObject]decimal left, short right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]decimal left, short right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]decimal left, short right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]decimal left, short right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]decimal left, short right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static decimal Add([SourceObject]decimal left, int right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static decimal Substract([SourceObject]decimal left, int right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static decimal Divide([SourceObject]decimal left, int right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]decimal left, int right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]decimal left, int right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]decimal left, int right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]decimal left, int right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static decimal Add([SourceObject]decimal left, long right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static decimal Substract([SourceObject]decimal left, long right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static decimal Divide([SourceObject]decimal left, long right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]decimal left, long right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]decimal left, long right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]decimal left, long right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]decimal left, long right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static double Add([SourceObject]double left, double right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static double Substract([SourceObject]double left, double right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static double Divide([SourceObject]double left, double right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]double left, double right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]double left, double right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]double left, double right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]double left, double right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static double Add([SourceObject]double left, short right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static double Substract([SourceObject]double left, short right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static double Divide([SourceObject]double left, short right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]double left, short right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]double left, short right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]double left, short right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]double left, short right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static double Add([SourceObject]double left, int right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static double Substract([SourceObject]double left, int right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static double Divide([SourceObject]double left, int right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]double left, int right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]double left, int right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]double left, int right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]double left, int right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("Add", "Adds two numbers")]
		//public static double Add([SourceObject]double left, long right) {
		//	return left + right;
		//}

		//[MorestachioFormatter("Substract", "Substracts the other number from the current number")]
		//public static double Substract([SourceObject]double left, long right) {
		//	return left - right;
		//}

		//[MorestachioFormatter("Divide", "Devides the other number from the current number")]
		//public static double Divide([SourceObject]double left, long right) {
		//	return left / right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]double left, long right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]double left, long right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]double left, long right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]double left, long right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]ushort left, ushort right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]ushort left, ushort right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]ushort left, ushort right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]ushort left, ushort right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]ushort left, uint right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]ushort left, uint right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]ushort left, uint right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]ushort left, uint right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]ushort left, ulong right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]ushort left, ulong right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]ushort left, ulong right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]ushort left, ulong right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]uint left, ushort right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]uint left, ushort right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]uint left, ushort right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]uint left, ushort right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]uint left, uint right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]uint left, uint right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]uint left, uint right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]uint left, uint right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]uint left, ulong right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]uint left, ulong right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]uint left, ulong right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]uint left, ulong right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]ulong left, ushort right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]ulong left, ushort right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]ulong left, ushort right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]ulong left, ushort right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]ulong left, uint right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]ulong left, uint right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]ulong left, uint right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]ulong left, uint right) {
		//	return left <= right;
		//}

		//[MorestachioFormatter("BiggerAs", "Returns if ether the value is bigger as the other")]
		//public static bool BiggerAs([SourceObject]ulong left, ulong right) {
		//	return left > right;
		//}

		//[MorestachioFormatter("SmallerAs", "Returns if ether the value is smaller as the other")]
		//public static bool SmallerAs([SourceObject]ulong left, ulong right) {
		//	return left < right;
		//}

		//[MorestachioFormatter("BiggerOrEqualAs", "Returns if ether the value is bigger or equal as the other")]
		//public static bool BiggerOrEqualAs([SourceObject]ulong left, ulong right) {
		//	return left >= right;
		//}

		//[MorestachioFormatter("SmallerOrEqualAs", "Returns if ether the value is smaller or equal as the other")]
		//public static bool SmallerOrEqualAs([SourceObject]ulong left, ulong right) {
		//	return left <= right;
		//}
 
	}
}
