using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Morestachio.Formatter.Framework.Attributes;

namespace Morestachio.Formatter.Framework;

/// <summary>
///		Extension methods for <see cref="IMorestachioFormatterService"/>
/// </summary>
public static class MorestachioFormatterServiceFassadeExtensions
{
	/// <summary>
	///		Adds a type surrogate
	/// </summary>
	/// <param name="service"></param>
	/// <param name="type"></param>
	/// <returns></returns>
	public static FormatterServiceAddFassade AddForType(this IMorestachioFormatterService service, Type type)
	{
		return new FormatterServiceAddFassade(type, service);
	}
}

/// <summary>
///		Allows or prohibits the calling for methods for a particular type
/// </summary>
public class FormatterServiceAddFassade
{
	private readonly Type _type;
	private readonly IMorestachioFormatterService _morestachioFormatterService;

	internal FormatterServiceAddFassade(Type type, IMorestachioFormatterService morestachioFormatterService)
	{
		_type = type;
		_morestachioFormatterService = morestachioFormatterService;
	}

	/// <summary>
	///		Adds the method into the whitelist of allowed methods
	/// </summary>
	/// <param name="methodName"></param>
	/// <param name="formatterDescriptor"></param>
	/// <returns></returns>
	/// <exception cref="InvalidOperationException"></exception>
	public FormatterServiceAddFassade AllowMethod(string methodName,
												IMorestachioFormatterDescriptor formatterDescriptor)
	{
		var method = _type.GetMethod(methodName);

		if (method == null)
		{
			throw new InvalidOperationException($"The method '{_type}.{methodName}' could not be found.");
		}

		return AllowMethod(method, formatterDescriptor);
	}


	/// <summary>
	///		Adds the method into the whitelist of allowed methods
	/// </summary>
	/// <param name="methodName"></param>
	/// <param name="formatterDescriptor"></param>
	/// <returns></returns>
	/// <exception cref="InvalidOperationException"></exception>
	public FormatterServiceAddFassade AllowMethod(MethodInfo methodName,
												IMorestachioFormatterDescriptor formatterDescriptor)
	{
		if (methodName == null)
		{
			throw new ArgumentNullException(nameof(methodName));
		}

		_morestachioFormatterService.Add(methodName, formatterDescriptor);
		return this;
	}
}

/// <summary>
///		Add Extensions for easy runtime added Functions
/// </summary>
public static class MorestachioFormatterServiceExtensions
{
	/// <summary>
	///     Adds all formatter that are decorated with the <see cref="MorestachioFormatterAttribute" />
	/// </summary>
	public static void AddFromType(this IMorestachioFormatterService service, Type type)
	{
		foreach (var method in type.GetMethods(BindingFlags.Static | BindingFlags.Public))
		{
			var hasFormatterAttr = method.GetCustomAttributes<MorestachioFormatterAttribute>();

			foreach (var morestachioFormatterAttribute in hasFormatterAttr)
			{
				if (morestachioFormatterAttribute == null)
				{
					continue;
				}

				service.Add(method, morestachioFormatterAttribute);
			}
		}

		foreach (var method in type.GetMethods(BindingFlags.Instance | BindingFlags.Public))
		{
			var hasFormatterAttr = method.GetCustomAttributes<MorestachioFormatterAttribute>();

			foreach (var morestachioFormatterAttribute in hasFormatterAttr)
			{
				if (morestachioFormatterAttribute == null)
				{
					continue;
				}

				morestachioFormatterAttribute.LinkFunctionTarget = true;
				morestachioFormatterAttribute.IsSourceObjectAware = false;
				service.Add(method, morestachioFormatterAttribute);
			}
		}
	}

	/// <summary>
	///     Adds all formatter that are decorated with the <see cref="MorestachioFormatterAttribute" />
	/// </summary>
	public static void AddFromType<T>(this IMorestachioFormatterService service)
	{
		AddFromType(service, typeof(T));
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle(this IMorestachioFormatterService service,
														Delegate function,
														string name)
	{
		return service.AddSingle(function, new MorestachioFormatterAttribute(name, "Autogenerated description")
		{
			OutputType = function.Method.ReturnType,
			ReturnHint = "None",
		});
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal(this IMorestachioFormatterService service,
																Delegate function,
																string name)
	{
		return service.AddSingle(function, new MorestachioGlobalFormatterAttribute(name, "Autogenerated description")
		{
			OutputType = function.Method.ReturnType,
			ReturnHint = "None",
		});
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle(this IMorestachioFormatterService service,
														Delegate function,
														MorestachioFormatterAttribute attribute)
	{
		attribute.OutputType = function.Method.ReturnType;
		attribute.ReturnHint = "None";

		var morestachioFormatterModel = service.Add(function.Method, attribute);
		morestachioFormatterModel.FunctionTarget = function.Target;
		return morestachioFormatterModel.MetaData;
	}

	#region Action Overloads

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle(this IMorestachioFormatterService service,
														Action function,
														string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T>(this IMorestachioFormatterService service,
															Action<T> function,
															string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T, T1>(this IMorestachioFormatterService service,
																Action<T, T1> function,
																string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T, T1, T2>(this IMorestachioFormatterService service,
																	Action<T, T1, T2> function,
																	string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T, T1, T2, T3>(this IMorestachioFormatterService service,
																		Action<T, T1, T2, T3> function,
																		string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T, T1, T2, T3, T4>(
		this IMorestachioFormatterService service,
		Action<T, T1, T2, T3, T4> function,
		string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	#endregion

	#region Function Overloads

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T>(this IMorestachioFormatterService service,
															Func<T> function,
															string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T, T1>(this IMorestachioFormatterService service,
																Func<T, T1> function,
																string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T, T1, T2>(this IMorestachioFormatterService service,
																	Func<T, T1, T2> function,
																	string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T, T1, T2, T3>(this IMorestachioFormatterService service,
																		Func<T, T1, T2, T3> function,
																		string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingle<T, T1, T2, T3, T4>(
		this IMorestachioFormatterService service,
		Func<T, T1, T2, T3, T4> function,
		string name)
	{
		return service.AddSingle((Delegate)function, name);
	}

	#endregion

	#region Action Overloads

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal(this IMorestachioFormatterService service,
																Action function,
																string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T>(this IMorestachioFormatterService service,
																Action<T> function,
																string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T, T1>(this IMorestachioFormatterService service,
																	Action<T, T1> function,
																	string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T, T1, T2>(
		this IMorestachioFormatterService service,
		Action<T, T1, T2> function,
		string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T, T1, T2, T3>(
		this IMorestachioFormatterService service,
		Action<T, T1, T2, T3> function,
		string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T, T1, T2, T3, T4>(
		this IMorestachioFormatterService service,
		Action<T, T1, T2, T3, T4> function,
		string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	#endregion

	#region Function Overloads

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T>(this IMorestachioFormatterService service,
																Func<T> function,
																string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T, T1>(this IMorestachioFormatterService service,
																	Func<T, T1> function,
																	string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T, T1, T2>(
		this IMorestachioFormatterService service,
		Func<T, T1, T2> function,
		string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T, T1, T2, T3>(
		this IMorestachioFormatterService service,
		Func<T, T1, T2, T3> function,
		string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	/// <summary>
	///		Adds a new Function to the list of formatters
	/// </summary>
	public static MultiFormatterInfoCollection AddSingleGlobal<T, T1, T2, T3, T4>(
		this IMorestachioFormatterService service,
		Func<T, T1, T2, T3, T4> function,
		string name)
	{
		return service.AddSingleGlobal((Delegate)function, name);
	}

	#endregion
}