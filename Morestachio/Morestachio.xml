<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Morestachio</name>
    </assembly>
    <members>
        <member name="T:Morestachio.Attributes.FormatterArgumentNameAttribute">
            <summary>
            	Sets the name for a Formatter named Argument
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Morestachio.Attributes.FormatterArgumentNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Attributes.FormatterArgumentNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Morestachio.Attributes.FormatterArgumentNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Morestachio.Attributes.FormatterValueConverterAttribute">
            <summary>
            	Defines one or more Value Converter for this parameter
            </summary>
        </member>
        <member name="M:Morestachio.Attributes.FormatterValueConverterAttribute.#ctor(System.Type)">
            <summary>
            	
            </summary>
            <param name="converterType">Must implement <see cref="T:Morestachio.Formatter.Framework.Converter.IFormatterValueConverter"/></param>
        </member>
        <member name="P:Morestachio.Attributes.FormatterValueConverterAttribute.ConverterType">
            <summary>
            	The Formatter for this parameter
            </summary>
        </member>
        <member name="M:Morestachio.Attributes.FormatterValueConverterAttribute.CreateInstance">
            <summary>
            	Creates an instance of the given converter type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morestachio.Attributes.RestParameterAttribute">
            <summary>
            	Marks the Parameter as an Rest parameter. All non specify parameter will given here. 
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Morestachio.Attributes.SourceObjectAttribute">
            <summary>
            	Marks an Parameter as the source object. That object is the source from where the formatter was called.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Morestachio.DocumentScope">
            <summary>
            	Defines the scope of an DocumentItem that can has children
            </summary>
        </member>
        <member name="M:Morestachio.DocumentScope.#ctor(Morestachio.Document.Contracts.IDocumentItem)">
            <summary>
            	Creates a new Document scope that is no formatting and is no alias
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:Morestachio.DocumentScope.Document">
            <summary>
            	The document item that has children
            </summary>
        </member>
        <member name="P:Morestachio.DocumentScope.IsFormattingScope">
            <summary>
            	Is this a formatted scope
            </summary>
        </member>
        <member name="P:Morestachio.DocumentScope.HasAlias">
            <summary>
            	Is this an alias
            </summary>
        </member>
        <member name="P:Morestachio.DocumentScope.AliasName">
            <summary>
            	If <see cref="P:Morestachio.DocumentScope.HasAlias"/> what name does the alias have
            </summary>
        </member>
        <member name="T:Morestachio.Document.AliasDocumentItem">
            <summary>
            	Creates an alias 
            </summary>
        </member>
        <member name="M:Morestachio.Document.AliasDocumentItem.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Morestachio.Document.AliasDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.AliasDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.AliasDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.EachDocumentItem">
            <summary>
            	Emits N items that are in the <see cref="!:Value"/>
            </summary>
        </member>
        <member name="M:Morestachio.Document.EachDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.EachDocumentItem.#ctor(Morestachio.Framework.Expression.IExpression)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.EachDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.EachDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <exception cref="T:Morestachio.Framework.IndexedParseException"></exception>
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.ContentDocumentItem">
            <summary>
            	Defines a area that has no morestachio keywords and can be rendered as is
            </summary>
        </member>
        <member name="M:Morestachio.Document.ContentDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.ContentDocumentItem.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.ContentDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.ContentDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.Contracts.DocumentExtenstions">
            <summary>
            	Helper Functions for Document creation
            </summary>
        </member>
        <member name="M:Morestachio.Document.Contracts.DocumentExtenstions.WithScope(System.Collections.Generic.IEnumerable{Morestachio.Document.Contracts.IDocumentItem},Morestachio.Framework.ContextObject)">
            <summary>
            	
            </summary>
        </member>
        <member name="T:Morestachio.Document.Contracts.DocumentItemExecution">
            <summary>
            	Combines a Document info that should be rendered with a <see cref="P:Morestachio.Document.Contracts.DocumentItemExecution.ContextObject"/>
            </summary>
        </member>
        <member name="M:Morestachio.Document.Contracts.DocumentItemExecution.#ctor(Morestachio.Document.Contracts.IDocumentItem,Morestachio.Framework.ContextObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Document.Contracts.DocumentItemExecution"/> struct.
            </summary>
            <param name="documentItem">The document item.</param>
            <param name="contextObject">The context object.</param>
        </member>
        <member name="P:Morestachio.Document.Contracts.DocumentItemExecution.DocumentItem">
            <summary>
            Gets the document item.
            </summary>
            <value>
            The document item.
            </value>
        </member>
        <member name="P:Morestachio.Document.Contracts.DocumentItemExecution.ContextObject">
            <summary>
            Gets the context object.
            </summary>
            <value>
            The context object.
            </value>
        </member>
        <member name="T:Morestachio.Document.Contracts.IDocumentItem">
            <summary>
            	Defines a Part in the Template that can be processed
            </summary>
        </member>
        <member name="M:Morestachio.Document.Contracts.IDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <summary>
            	Renders its Value into the <see cref="!:outputStream"/>.
            	If there are any Document items that should be executed directly after they should be returned		
            </summary>
            <param name="outputStream">The output stream.</param>
            <param name="context">The context.</param>
            <param name="scopeData">The scope data.</param>
            <returns></returns>
        </member>
        <member name="P:Morestachio.Document.Contracts.IDocumentItem.Kind">
            <summary>
            	Gets the Kind of this Document item
            </summary>
        </member>
        <member name="P:Morestachio.Document.Contracts.IDocumentItem.Children">
            <summary>
            	The list of Children that are children of this Document item
            </summary>
        </member>
        <member name="M:Morestachio.Document.Contracts.IDocumentItem.Add(Morestachio.Document.Contracts.IDocumentItem[])">
            <summary>
            	Adds the specified childs.
            </summary>
        </member>
        <member name="P:Morestachio.Document.Contracts.IDocumentItem.ExpressionStart">
            <summary>
            	If this is a Natural Document item this defines the Position within the Template where the DocumentItem is parsed from
            </summary>
        </member>
        <member name="M:Morestachio.Document.Contracts.IDocumentItem.SerializeXmlCore(System.Xml.XmlWriter)">
            <summary>
            	Can be used to allow custom data to be serialized for XML serialization
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Morestachio.Document.Contracts.IDocumentItem.DeSerializeXmlCore(System.Xml.XmlReader)">
            <summary>
            	Can be used to allow custom data to be deserialized for XML serialization
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Morestachio.Document.Custom.CustomDocumentItemProvider">
            <summary>
            	Allows the injection of a custom DocumentItem 
            </summary>
        </member>
        <member name="M:Morestachio.Document.Custom.CustomDocumentItemProvider.#ctor">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.Custom.CustomDocumentItemProvider.ScopeStack">
            <summary>
            	A Custom stack that keeps track of enclosing tokens such as #IF and /IF
            </summary>
        </member>
        <member name="M:Morestachio.Document.Custom.CustomDocumentItemProvider.ShouldTokenize(System.String)">
            <summary>
            	Should check if the token contains this partial token. If returns true further actions will happen.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Morestachio.Document.Custom.CustomDocumentItemProvider.TokenInfo">
            <summary>
            	An helper object that will be given to the Tokenize method
            </summary>
        </member>
        <member name="P:Morestachio.Document.Custom.CustomDocumentItemProvider.TokenInfo.Token">
            <summary>
            	The obtained Token
            </summary>
        </member>
        <member name="P:Morestachio.Document.Custom.CustomDocumentItemProvider.TokenInfo.Errors">
            <summary>
            	Can be filled to return errors that occured in the formatting process
            </summary>
        </member>
        <member name="M:Morestachio.Document.Custom.CustomDocumentItemProvider.Tokenize(Morestachio.Document.Custom.CustomDocumentItemProvider.TokenInfo,Morestachio.ParserOptions)">
            <summary>
            	Should return any kind of token Pair that encapsulates the value for the DocumentItem
            </summary>
            <param name="token"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Document.Custom.CustomDocumentItemProvider.ShouldParse(Morestachio.Framework.TokenPair,Morestachio.ParserOptions)">
            <summary>
            	Should return True if the Token is produced by this provider and should be parsed with this provider
            </summary>
            <param name="token"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Document.Custom.CustomDocumentItemProvider.Parse(Morestachio.Framework.TokenPair,Morestachio.ParserOptions,System.Collections.Generic.Stack{Morestachio.DocumentScope})">
            <summary>
            	Should return an document item that will be invoked when parsing the Template
            </summary>
            <param name="token"></param>
            <param name="options"></param>
            <param name="buildStack"></param>
            <returns></returns>
        </member>
        <member name="T:Morestachio.Document.DocumentItemBase">
            <summary>
                Base class for Document items
            </summary>
        </member>
        <member name="M:Morestachio.Document.DocumentItemBase.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.DocumentItemBase.Equals(Morestachio.Document.DocumentItemBase)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.DocumentItemBase.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.DocumentItemBase.Kind">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.DocumentItemBase.Children">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.DocumentItemBase.ExpressionStart">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.DocumentItemBase.Add(Morestachio.Document.Contracts.IDocumentItem[])">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.DocumentItemBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.DocumentItemBase.ContinueBuilding(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject)">
            <summary>
                Can be called to check if any stop is requested. If return true no stop is requested
            </summary>
        </member>
        <member name="M:Morestachio.Document.DocumentItemBase.SerializeBinaryCore(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Can be overwritten to extend the binary serialization process
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Morestachio.Document.DocumentItemBase.SerializeXml(System.Xml.XmlWriter)">
            <summary>
                Should be overwritten when using custom properties in deviated document items to add the necessary xml information.
                When using this method it is ensured that there is already a distinct XML node present. You should not close this
                node and always exit before leaving it.
                This method will be called right after writing the document node and before writing the children of this node
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Morestachio.Document.DocumentItemBase.DeSerializeXml(System.Xml.XmlReader)">
            <summary>
                Will be called to deserialize custom properties. See <see cref="M:Morestachio.Document.DocumentItemBase.SerializeXml(System.Xml.XmlWriter)" /> for further info.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Morestachio.Document.ElseExpressionScopeDocumentItem">
            <summary>
            	Defines an else Expression. This expression MUST come ether directly or only separated by <see cref="T:Morestachio.Document.ContentDocumentItem"/> after an <see cref="T:Morestachio.Document.IfExpressionScopeDocumentItem"/> or an <see cref="T:Morestachio.Document.InvertedExpressionScopeDocumentItem"/>
            </summary>
        </member>
        <member name="M:Morestachio.Document.ElseExpressionScopeDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="T:Morestachio.Document.EvaluateVariableDocumentItem">
            <summary>
            	Evaluates a variable expression and then stores it into the set alias
            </summary>
        </member>
        <member name="M:Morestachio.Document.EvaluateVariableDocumentItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.EvaluateVariableDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.EvaluateVariableDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.ExpressionScopeDocumentItem">
            <summary>
            	Defines the start of a Scope
            </summary>
        </member>
        <member name="M:Morestachio.Document.ExpressionScopeDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.ExpressionScopeDocumentItem.#ctor(Morestachio.Framework.Expression.IExpression)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.ExpressionScopeDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.ExpressionScopeDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.IfExpressionScopeDocumentItem">
            <summary>
            	Defines the start of a Scope
            </summary>
        </member>
        <member name="M:Morestachio.Document.IfExpressionScopeDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.IfExpressionScopeDocumentItem.#ctor(Morestachio.Framework.Expression.IExpression)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.IfExpressionScopeDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.IfExpressionScopeDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.IfNotExpressionScopeDocumentItem">
            <summary>
            	Defines the start of a Scope
            </summary>
        </member>
        <member name="M:Morestachio.Document.IfNotExpressionScopeDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.IfNotExpressionScopeDocumentItem.#ctor(Morestachio.Framework.Expression.IExpression)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.IfNotExpressionScopeDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.IfNotExpressionScopeDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.InvertedExpressionScopeDocumentItem">
            <summary>
            	Defines an inverted scope
            </summary>
            <seealso cref="T:Morestachio.Document.ExpressionScopeDocumentItem"/>
        </member>
        <member name="M:Morestachio.Document.InvertedExpressionScopeDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.InvertedExpressionScopeDocumentItem.#ctor(Morestachio.Framework.Expression.IExpression)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.InvertedExpressionScopeDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.InvertedExpressionScopeDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.IsolatedContextDocumentItem">
            <summary>
            	Executes the children with a cloned Context
            </summary>
        </member>
        <member name="M:Morestachio.Document.IsolatedContextDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="P:Morestachio.Document.IsolatedContextDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.IsolatedContextDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.IValueDocumentItem">
            <summary>
            	Defines a Part in the Template that provides a direct access to 
            </summary>
        </member>
        <member name="M:Morestachio.Document.IValueDocumentItem.GetValue(Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <summary>
            	Traverses the path down
            </summary>
        </member>
        <member name="T:Morestachio.Document.MorestachioDocument">
            <summary>
            	Defines a document that can be rendered. Does only store its Children
            </summary>
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.SerializeBinaryCore(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.DeSerializeXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.SerializeXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.MorestachioDocument.MorestachioVersion">
            <summary>
            	Gets the Version of Morestachio that this Document was parsed with
            </summary>
        </member>
        <member name="P:Morestachio.Document.MorestachioDocument.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.ProcessItemsAndChildren(System.Collections.Generic.IEnumerable{Morestachio.Document.Contracts.IDocumentItem},Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <summary>
            Processes the items and children.
            </summary>
            <param name="documentItems">The document items.</param>
            <param name="outputStream">The output stream.</param>
            <param name="context">The context.</param>
            <param name="scopeData">The scope data.</param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.Equals(Morestachio.Document.MorestachioDocument)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.MorestachioDocument.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.PartialDocumentItem">
            <summary>
            	Contains the Declaration of a Partial item
            </summary>
        </member>
        <member name="M:Morestachio.Document.PartialDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.PartialDocumentItem.#ctor(System.String,Morestachio.Document.Contracts.IDocumentItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Document.PartialDocumentItem"/> class.
            </summary>
            <param name="partialName">The partial name.</param>
            <param name="partial">The partial.</param>
        </member>
        <member name="M:Morestachio.Document.PartialDocumentItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PartialDocumentItem.SerializeBinaryCore(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PartialDocumentItem.SerializeXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PartialDocumentItem.DeSerializeXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.PartialDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.PartialDocumentItem.Partial">
            <summary>
            	The partial Document
            </summary>
        </member>
        <member name="M:Morestachio.Document.PartialDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.PathDocumentItem">
            <summary>
            	An single Value expression
            </summary>
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.#ctor(Morestachio.Framework.Expression.IExpression,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.SerializeBinaryCore(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.SerializeXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.DeSerializeXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.PathDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.PathDocumentItem.EscapeValue">
            <summary>
            Gets a value indicating whether [escape value].
            </summary>
            <value>
              <c>true</c> if [escape value]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.Equals(Morestachio.Document.PathDocumentItem)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PathDocumentItem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.PrintContextValue">
            <summary>
            	If a formatter ends without using its value it is printed
            </summary>
        </member>
        <member name="M:Morestachio.Document.PrintContextValue.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.PrintContextValue.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.PrintContextValue.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PrintContextValue.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.PrintContextValue.GetValue(Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.RemoveAliasDocumentItem">
            <summary>
            	Removes the alias from the scope
            </summary>
        </member>
        <member name="M:Morestachio.Document.RemoveAliasDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.RemoveAliasDocumentItem.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="aliasName"></param>
        </member>
        <member name="M:Morestachio.Document.RemoveAliasDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.RemoveAliasDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.RenderPartialDocumentItem">
            <summary>
            	Prints a partial
            </summary>
        </member>
        <member name="M:Morestachio.Document.RenderPartialDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.RenderPartialDocumentItem.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.RenderPartialDocumentItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.RenderPartialDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.RenderPartialDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.RenderPartialDoneDocumentItem">
            <summary>
            	The end of a Partial declaration
            </summary>
        </member>
        <member name="M:Morestachio.Document.RenderPartialDoneDocumentItem.#ctor">
            <summary>
            	Used for XML Serialization
            </summary>
        </member>
        <member name="M:Morestachio.Document.RenderPartialDoneDocumentItem.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Document.RenderPartialDoneDocumentItem.Kind">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Document.RenderPartialDoneDocumentItem.Render(Morestachio.Framework.IByteCounterStream,Morestachio.Framework.ContextObject,Morestachio.ScopeData)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Document.ValueDocumentItemBase">
            <summary>
            	A common base class for emitting a single string value
            </summary>
        </member>
        <member name="T:Morestachio.Document.ExpressionDocumentItemBase">
            <summary>
            	A common base class for emitting a single string value
            </summary>
        </member>
        <member name="T:Morestachio.Formatter.Framework.Converter.GenericTypeConverter">
            <summary>
            	Uses the TypeDescriptor to convert native cs types
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.Converter.GenericTypeConverter.CanConvert(System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Formatter.Framework.Converter.GenericTypeConverter.Convert(System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Formatter.Framework.Converter.IFormatterValueConverter">
            <summary>
            	Can be used to Convert formatter parameters
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.Converter.IFormatterValueConverter.CanConvert(System.Object,System.Type)">
             <summary>
            		Used to check if this type can be converted
             </summary>
             <param name="value"></param>
             <param name="requestedType"></param>
             <returns></returns>
        </member>
        <member name="M:Morestachio.Formatter.Framework.Converter.IFormatterValueConverter.Convert(System.Object,System.Type)">
             <summary>
            		Should convert the given value to the requestedType
             </summary>
             <param name="value"></param>
             <param name="requestedType"></param>
             <returns></returns>
        </member>
        <member name="T:Morestachio.Formatter.Framework.IMorestachioFormatterService">
            <summary>
            	Interface for Resolving formatters
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.IMorestachioFormatterService.AllParametersAllDefaultValue">
            <summary>
            	Experimental <para/>
            	Allows all parameters that are objects to be null
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.IMorestachioFormatterService.FormatterNameCompareMode">
            <summary>
            	Defines how Formatters names are compared
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.IMorestachioFormatterService.Filter(System.Func{Morestachio.Formatter.Framework.MorestachioFormatterModel,System.Boolean})">
            <summary>
            	Filteres the list of Formatters
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:Morestachio.Formatter.Framework.IMorestachioFormatterService.ValueConverter">
            <summary>
            	Defines the list of all formatter value converters
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.IMorestachioFormatterService.CallMostMatchingFormatter(System.Type,System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Object,System.String)">
            <summary>
            	Searches for the formatter that matches the type and the given values
            </summary>
            <param name="type"></param>
            <param name="values"></param>
            <param name="sourceValue"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Formatter.Framework.IMorestachioFormatterService.Add(System.Reflection.MethodInfo,Morestachio.Formatter.Framework.MorestachioFormatterAttribute)">
            <summary>
            	Adds a new Formatter
            </summary>
            <param name="method"></param>
            <param name="morestachioFormatterAttribute"></param>
            <returns></returns>
        </member>
        <member name="T:Morestachio.Formatter.Framework.InputDescription">
            <summary>
            	Wrapper class for the input of an formatter function
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.InputDescription.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Formatter.Framework.InputDescription"/> class.
            </summary>
            <param name="description">The description.</param>
            <param name="outputType">Type of the output.</param>
            <param name="example">The example.</param>
        </member>
        <member name="P:Morestachio.Formatter.Framework.InputDescription.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.InputDescription.Example">
            <summary>
            Gets the example.
            </summary>
            <value>
            The example.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.InputDescription.OutputType">
            <summary>
            Gets the type of the output if its not the same as the function returns.
            </summary>
            <value>
            The type of the output.
            </value>
        </member>
        <member name="T:Morestachio.Formatter.Framework.MorestachioFormatterAttribute">
            <summary>
            	When decorated by a function, it can be used to format in morestachio
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Formatter.Framework.MorestachioFormatterAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterAttribute.Name">
            <summary>
            	What is the "header" of the function in morestachio.
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterAttribute.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterAttribute.ReturnHint">
            <summary>
            Gets or sets the return hint.
            </summary>
            <value>
            The return hint.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterAttribute.OutputType">
            <summary>
            Gets or sets the type of the output.
            </summary>
            <value>
            The type of the output.
            </value>
        </member>
        <member name="T:Morestachio.Formatter.Framework.MorestachioFormatterInputAttribute">
            <summary>
            	Declares the input syntax of any formatter.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterInputAttribute.Description">
            <summary>
            	Shortly describes of what the input argument consists
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterInputAttribute.Example">
            <summary>
            Gets or sets the example.
            </summary>
            <value>
            The example.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterInputAttribute.OutputType">
             <summary>
            		If used will the input return any subtype of the used type by the formatter.
             <example>
            if the formatter returns object in its function header, but when this input is used it will return int
             </example>
             </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterInputAttribute.Output">
            <summary>
            	More description of how the output is formatted. Freetext
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterInputAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Formatter.Framework.MorestachioFormatterInputAttribute"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="T:Morestachio.Formatter.Framework.MorestachioFormatterModel">
            <summary>
            	Wrapper class for a function call
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterModel.#ctor(System.String,System.String,System.Type,Morestachio.Formatter.Framework.InputDescription[],System.String,System.Reflection.MethodInfo,Morestachio.Formatter.MultiFormatterInfoCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Formatter.Framework.MorestachioFormatterModel"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="inputType">Type of the input.</param>
            <param name="inputDescription">The input description.</param>
            <param name="output">The output.</param>
            <param name="function">The function.</param>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterModel.#ctor(System.String,System.String,System.Type,System.Type,Morestachio.Formatter.Framework.InputDescription[],System.String,System.Reflection.MethodInfo,Morestachio.Formatter.MultiFormatterInfoCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Formatter.Framework.MorestachioFormatterModel"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="inputType">Type of the input.</param>
            <param name="outputType">Type of the output.</param>
            <param name="inputDescription">The input description.</param>
            <param name="output">The output.</param>
            <param name="function">The function.</param>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterModel.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterModel.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterModel.InputDescription">
            <summary>
            Gets the input description.
            </summary>
            <value>
            The input description.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterModel.InputType">
            <summary>
            Gets the type of the input.
            </summary>
            <value>
            The type of the input.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterModel.Output">
            <summary>
            Gets the output.
            </summary>
            <value>
            The output.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterModel.OutputType">
            <summary>
            Gets the type of the output.
            </summary>
            <value>
            The type of the output.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterModel.Function">
            <summary>
            Gets the function.
            </summary>
            <value>
            The function.
            </value>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterModel.MetaData">
            <summary>
                Gets the Meta data for the Arguments
            </summary>
        </member>
        <member name="T:Morestachio.Formatter.Framework.MorestachioFormatterService">
            <summary>
                The Formatter service that can be used to interpret the Native C# formatter.
                To use this kind of formatter you must create a public static class where all formatting functions are located.
                Then create a public static function that accepts n arguments of the type you want to format. For Example:
                If the formatter should be only used for int formatting and the argument will always be a string you have to create
                a function that has this header.
                It must not return a value.
                The functions must be annotated with the MorestachioFormatter attribute
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Morestachio.Formatter.Framework.MorestachioFormatterService" /> class.
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterService.Formatters">
            <summary>
                Gets the gloabl formatter that are used always for any formatting run.
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterService.ValueConverter">
            <summary>
            	List of all Value Converters that can be used to convert formatter arguments
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterService.DefaultConverter">
            <summary>
            	The fallback Converter that should convert all known mscore lib types
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterService.FormatterLog">
            <summary>
                If set writes the Formatters log.
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.Log(System.Func{System.String})">
            <summary>
                Writes the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="T:Morestachio.Formatter.Framework.MorestachioFormatterService.FormatterFlow">
            <summary>
                Can be returned by a Formatter to control what formatter should be used
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterService.FormatterFlow.Skip">
            <summary>
                Return code for all formatters to skip the execution of the current formatter and try another one that could also
                match
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.Filter(System.Func{Morestachio.Formatter.Framework.MorestachioFormatterModel,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.CallMostMatchingFormatter(System.Type,System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.Execute(Morestachio.Formatter.Framework.MorestachioFormatterModel,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
                Executes the specified formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="sourceObject">The source object.</param>
            <param name="templateArguments">The template arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.GetMatchingFormatter(System.Object,System.Type,System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.String)">
            <summary>
                Gets the matching formatter.
            </summary>
        </member>
        <member name="T:Morestachio.Formatter.Framework.MorestachioFormatterService.FormatterComposingResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterService.FormatterComposingResult.MethodInfo">
            <summary>
            	The Result Method of the Composing operation. It can be different from the original.
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.Framework.MorestachioFormatterService.FormatterComposingResult.Arguments">
            <summary>
            	The list of arguments for the <see cref="P:Morestachio.Formatter.Framework.MorestachioFormatterService.FormatterComposingResult.MethodInfo"/>
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.MakeGenericMethodInfoByValues(System.Reflection.MethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            	Internal use only
            </summary>
            <param name="methodInfo"></param>
            <param name="namedParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.ComposeValues(Morestachio.Formatter.Framework.MorestachioFormatterModel,System.Object,System.Reflection.MethodInfo,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
                Composes the values into a Dictionary for each formatter. If returns null, the formatter will not be called.
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.ComposeArgumentValue(Morestachio.Formatter.MultiFormatterInfo,System.Int32,System.Object@)">
            <summary>
            	Should compose the givenValue and/or transform it in any way that it can match the <para>parameter</para>
            </summary>
            <param name="parameter"></param>
            <param name="argumentIndex"></param>
            <param name="givenValue"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterService.Add(System.Reflection.MethodInfo,Morestachio.Formatter.Framework.MorestachioFormatterAttribute)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Formatter.Framework.MorestachioFormatterServiceExtensions">
            <summary>
            	Add Extensions for easy runtime added Functions
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Framework.MorestachioFormatterServiceExtensions.AddFromType(Morestachio.Formatter.Framework.IMorestachioFormatterService,System.Type)">
            <summary>
                Adds all formatter that are decorated with the <see cref="T:Morestachio.Formatter.Framework.MorestachioFormatterAttribute" />
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Morestachio.Formatter.Framework.MorstachioFormatter">
            <summary>
                Delegate for mapping formatter function of the Morestachio framework to the params argument
            </summary>
            <param name="originalObject">The original object.</param>
            <param name="name">The name.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:Morestachio.Formatter.IPartialsStore">
            <summary>
            	Allows to store Partials for multiple Runs
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.IPartialsStore.AddParsedPartial(Morestachio.MorestachioDocumentInfo,System.String)">
            <summary>
            	Adds the Parsed Partial to the store
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.IPartialsStore.RemovePartial(System.String)">
            <summary>
            	Removes the Partial from the List of Known Partials
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Morestachio.Formatter.IPartialsStore.GetPartial(System.String)">
            <summary>
            	Obtains the Partial if known
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Morestachio.Formatter.IPartialsStore.GetNames">
            <summary>
            	Gets the list of all known partials
            </summary>
        </member>
        <member name="T:Morestachio.Formatter.MultiFormatterInfo">
            <summary>
            	Contains information about the Parameter of an Multi argument formatter
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.MultiFormatterInfo.#ctor(System.Type,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Formatter.MultiFormatterInfo"/> class.
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.MultiFormatterInfo.ParameterType">
            <summary>
            	Of what type is this parameter
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.MultiFormatterInfo.Name">
            <summary>
            	Ether the name that is declared using the <seealso cref="T:Morestachio.Attributes.FormatterArgumentNameAttribute"/> or the name of the Parameter from code ( in that order )
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.MultiFormatterInfo.IsOptional">
            <summary>
            	Is the parameter optional
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.MultiFormatterInfo.IsSourceObject">
            <summary>
            	Is this parameter the source object
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.MultiFormatterInfo.Index">
            <summary>
            	The index in what order the argument is present in the Formatter
            </summary>
        </member>
        <member name="P:Morestachio.Formatter.MultiFormatterInfo.IsRestObject">
            <summary>
            	Is this parameter a params parameter. If so it will get all following not matched arguments
            </summary>
        </member>
        <member name="T:Morestachio.Formatter.MultiFormatterInfoCollection">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Formatter.MultiFormatterInfoCollection.#ctor(System.Collections.Generic.IEnumerable{Morestachio.Formatter.MultiFormatterInfo})">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Formatter.MultiFormatterInfoCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Formatter.MultiFormatterInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Formatter.MultiFormatterInfoCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.Formatter.MultiFormatterInfoCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Formatter.MultiFormatterInfoCollection.SetName(System.String,System.String)">
            <summary>
            	Sets the name of an Parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Formatter.MultiFormatterInfoCollection.LastIsParams">
            <summary>
            	When called and the last parameter is an object array, it will be used as an params parameter.
            	This is quite helpful as you cannot annotate Lambdas.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morestachio.Formatter.Predefined.EqualityFormatter">
            <summary>
            	A list of predefined Morestachio Formatters
            </summary>
        </member>
        <member name="M:Morestachio.Formatter.Predefined.EqualityFormatter.IsEquals(System.Object,System.Object)">
            <summary>
            	Checks two objects for equality
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Formatter.Predefined.EqualityFormatter.Negate(System.Boolean)">
            <summary>
            	Negates a boolean value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Formatter.Predefined.EqualityFormatter.IsReferenceEquals(System.Object,System.Object)">
            <summary>
            	Checks if two objects are the same
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Morestachio.Framework.ByteCounterStream">
            <summary>
            	Internal class to ensure that the given limit of bytes to write is never extended to ensure template quotas
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Morestachio.Framework.CharacterLocation">
            <summary>
            	Describes an Position within the Template
            </summary>
        </member>
        <member name="P:Morestachio.Framework.CharacterLocation.Line">
            <summary>
            	The line of the Template
            </summary>
        </member>
        <member name="P:Morestachio.Framework.CharacterLocation.Character">
            <summary>
            	The Character at the <see cref="P:Morestachio.Framework.CharacterLocation.Line"/>
            </summary>
        </member>
        <member name="T:Morestachio.Framework.ContextCollection">
            <summary>
                A context object for collections that is generated for each item inside a collection
            </summary>
        </member>
        <member name="M:Morestachio.Framework.ContextCollection.#ctor(System.Int64,System.Boolean,Morestachio.ParserOptions,System.String,Morestachio.Framework.ContextObject)">
            <summary>
                ctor
            </summary>
            <param name="index">the current index of the item inside the collection</param>
            <param name="last">true if its the last item</param>
            <param name="options"></param>
            <param name="key"></param>
        </member>
        <member name="P:Morestachio.Framework.ContextCollection.Index">
            <summary>
                The current index inside the collection
            </summary>
        </member>
        <member name="P:Morestachio.Framework.ContextCollection.Last">
            <summary>
                True if its the last item in the current collection
            </summary>
        </member>
        <member name="M:Morestachio.Framework.ContextCollection.HandlePathContext(System.Collections.Generic.Queue{System.Collections.Generic.KeyValuePair{System.String,Morestachio.Framework.Expression.PathTokenizer.PathType}},System.Collections.Generic.KeyValuePair{System.String,Morestachio.Framework.Expression.PathTokenizer.PathType})">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Framework.ContextCollection.CloneForEdit">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Framework.ContextObject">
            <summary>
                The current context for any given expression
            </summary>
        </member>
        <member name="F:Morestachio.Framework.ContextObject.DefaultDefinitionOfFalse">
            <summary>
            	<para>Gets the Default Definition of false.</para>
            	This is ether:
            	<para>- Null</para>
            	<para>- boolean false</para>
            	<para>- 0 double or int</para>
            	<para>- string.Empty (whitespaces are allowed)</para>
            	<para>- collection not Any().</para>
            	This field can be used to define your own <see cref="P:Morestachio.Framework.ContextObject.DefinitionOfFalse"/> and then fallback to the default logic
            </summary>
        </member>
        <member name="P:Morestachio.Framework.ContextObject.DefinitionOfFalse">
            <summary>
            	Gets the Definition of false on your Template.
            </summary>
            <value>
            	Must no be null
            </value>
            <exception cref="T:System.InvalidOperationException">If the value is null</exception>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.#ctor(Morestachio.ParserOptions,System.String,Morestachio.Framework.ContextObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.Framework.ContextObject"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="key">The key as seen in the Template</param>
        </member>
        <member name="P:Morestachio.Framework.ContextObject.IsNaturalContext">
            <summary>
            	Gets a value indicating whether this instance is natural context.
            	A Natural context is a context outside an Isolated scope
            </summary>
        </member>
        <member name="P:Morestachio.Framework.ContextObject.DefaultFormatter">
            <summary>
                The set of allowed types that may be printed. Complex types (such as arrays and dictionaries)
                should not be printed, or their printing should be specialized.
                Add an typeof(object) entry as Type to define a Default Output
            </summary>
        </member>
        <member name="P:Morestachio.Framework.ContextObject.Parent">
            <summary>
                The parent of the current context or null if its the root context
            </summary>
        </member>
        <member name="P:Morestachio.Framework.ContextObject.Value">
            <summary>
                The evaluated value of the expression
            </summary>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.MakeNatural">
            <summary>
            	Makes this instance natural
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.EnsureValue">
            <summary>
            Ensures that the Value is loaded if needed
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morestachio.Framework.ContextObject.AbortGeneration">
            <summary>
                is an abort currently requested
            </summary>
        </member>
        <member name="P:Morestachio.Framework.ContextObject.Key">
            <summary>
                The name of the property or key inside the value or indexer expression for lists
            </summary>
        </member>
        <member name="P:Morestachio.Framework.ContextObject.Options">
            <summary>
                With what options are the template currently is running
            </summary>
        </member>
        <member name="P:Morestachio.Framework.ContextObject.CancellationToken">
            <summary>
            </summary>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.HandlePathContext(System.Collections.Generic.Queue{System.Collections.Generic.KeyValuePair{System.String,Morestachio.Framework.Expression.PathTokenizer.PathType}},System.Collections.Generic.KeyValuePair{System.String,Morestachio.Framework.Expression.PathTokenizer.PathType})">
            <summary>
                if overwritten by a class it returns a context object for any non standard key or operation.
                if non of that
                <value>null</value>
            </summary>
            <param name="elements"></param>
            <param name="currentElement"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.GetContextForPath(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,Morestachio.Framework.Expression.PathTokenizer.PathType}},Morestachio.ScopeData)">
            <summary>
                Will walk the path by using the path seperator "." and evaluate the object at the end
            </summary>
            <param name="path"></param>
            <param name="scopeData"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.Exists">
            <summary>
                Determines if the value of this context exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.RenderToString">
            <summary>
            	Renders the Current value to a string or if null to the Null placeholder in the Options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.Format(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
                Parses the current object by using the given argument
            </summary>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.Format(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
                Parses the current object by using the given argument
            </summary>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.CloneForEdit">
            <summary>
                Clones the ContextObject into a new Detached object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Framework.ContextObject.Copy">
            <summary>
                Clones the ContextObject into a new Detached object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Framework.Expression.ExpressionTokenizer.ParseExpressionOrString(System.String,Morestachio.Framework.Expression.TokenzierContext)">
            <summary>
            	Parses the given text to ether an expression or an string
            </summary>
            <param name="expression"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Framework.Expression.ExpressionTokenizer.ParseExpressionOrString(System.String,Morestachio.Framework.Expression.TokenzierContext@)">
            <summary>
            	Parses the given text to ether an expression or an string
            </summary>
            <param name="expression"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Morestachio.Framework.Expression.HeaderArgumentType">
            <summary>
            </summary>
        </member>
        <member name="F:Morestachio.Framework.Expression.HeaderArgumentType.String">
            <summary>
                Defines the Value of the <see cref="T:Morestachio.Framework.Expression.HeaderTokenMatch" /> to be the content argument
            </summary>
        </member>
        <member name="F:Morestachio.Framework.Expression.HeaderArgumentType.Expression">
            <summary>
                Defines the Value of the <see cref="T:Morestachio.Framework.Expression.HeaderTokenMatch" /> to be an expression
            </summary>
        </member>
        <member name="T:Morestachio.Framework.Expression.HeaderTokenMatch">
            <summary>
                Defines a Match of Arguments for a Formatter
            </summary>
        </member>
        <member name="M:Morestachio.Framework.Expression.HeaderTokenMatch.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Morestachio.Framework.Expression.HeaderTokenMatch" /> class.
            </summary>
        </member>
        <member name="T:Morestachio.Framework.IByteCounterStream">
            <summary>
            	Defines the output that can count on written bytes into a stream
            </summary>
        </member>
        <member name="P:Morestachio.Framework.IByteCounterStream.BytesWritten">
            <summary>
            Gets or sets the bytes written.
            </summary>
            <value>
            The bytes written.
            </value>
        </member>
        <member name="P:Morestachio.Framework.IByteCounterStream.ReachedLimit">
            <summary>
            Gets or sets a value indicating whether [reached limit].
            </summary>
            <value>
              <c>true</c> if [reached limit]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Morestachio.Framework.IByteCounterStream.Write(System.String)">
            <summary>
            	Writes the Content into the underlying Stream when the limit is not exceeded
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:Morestachio.Framework.IndexedParseException">
            <summary>
                Indicates a parse error including line and character info.
            </summary>
        </member>
        <member name="T:Morestachio.Framework.MustachioException">
            <summary>
                The General Exception type for Framework Exceptions
            </summary>
        </member>
        <member name="M:Morestachio.Framework.MustachioException.#ctor(System.String)">
            <summary>
                Ctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Morestachio.Framework.MustachioStackOverflowException">
            <summary>
            	The Infinite Partials Exception type
            </summary>
        </member>
        <member name="M:Morestachio.Framework.MustachioStackOverflowException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="replacements"></param>
        </member>
        <member name="T:Morestachio.Framework.Tokenizer">
            <summary>
                Reads in a mustache template and lexes it into tokens.
            </summary>
            <exception cref="T:Morestachio.Framework.IndexedParseException"></exception>
        </member>
        <member name="F:Morestachio.Framework.Tokenizer.NegativePathSpec">
            <summary>
                Specifies combinations of paths that don't work.
            </summary>
        </member>
        <member name="T:Morestachio.Framework.TokenPair">
            <summary>
                The token that has been lexed out of template content.
            </summary>
        </member>
        <member name="M:Morestachio.Framework.TokenPair.#ctor(Morestachio.Framework.TokenType,System.String,Morestachio.Framework.CharacterLocation)">
            <summary>
            	Creates a new Token Pair
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="tokenLocation"></param>
        </member>
        <member name="P:Morestachio.Framework.TokenPair.Type">
            <summary>
            	The type of this Token
            </summary>
        </member>
        <member name="P:Morestachio.Framework.TokenPair.Expression">
            <summary>
            	With what format should this token be evaluated
            </summary>
        </member>
        <member name="P:Morestachio.Framework.TokenPair.Value">
            <summary>
            	What is the Value of this token
            </summary>
        </member>
        <member name="P:Morestachio.Framework.TokenPair.TokenLocation">
            <summary>
            	Where does this token occure in the Template
            </summary>
        </member>
        <member name="T:Morestachio.Framework.TokenType">
            <summary>
                The type of token produced in the lexing stage of template compilation.
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.EscapedSingleValue">
            <summary>
            	A path that should be printed. If it contains any html tags, those will be escaped
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.UnescapedSingleValue">
            <summary>
            	A path that should be printed. 
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.InvertedElementOpen">
            <summary>
            	Defines the start of a scope that will only be applied if the value of the path is falsy
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.ElementOpen">
            <summary>
            	Defines the start of a scope
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.ElementClose">
            <summary>
            	Defines the end of a scope
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.Comment">
            <summary>
            	A comment inside. Will not be printed
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.Content">
            <summary>
            	Plain content. No further processing
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.CollectionOpen">
            <summary>
            	The start of a collection loop
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.CollectionClose">
            <summary>
            	The end of a collection loop
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.Format">
            <summary>
                Contains information about the formatting of the values. Must be followed by PrintFormatted or CollectionOpen
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.Print">
            <summary>
                Is used to "print" the current formatted value to the output
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.PartialDeclarationOpen">
            <summary>
            	A Partial that is inserted into the one or multiple places in the Template
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.PartialDeclarationClose">
            <summary>
            	End of a Partial
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.RenderPartial">
            <summary>
            	Defines the place for rendering a single partial
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.Alias">
            <summary>
            	Defines the current Context as the be accessed by an alias
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.If">
            <summary>
            	Defines an if. It Works the same as the "#" keyword but does not scope its body to it.
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.IfClose">
            <summary>
            	Defines the end of a if-scope
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.IfNot">
            <summary>
            	Defines an inverted If. Works the same as the "^" keyword but does not scope its body to it
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.Else">
            <summary>
            	Defines an Else. An else can only be used when an if is it predecessor and will only execute when the if will not
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.ElseClose">
            <summary>
            	Defines the end of an else-scope
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.VariableDeclaration">
            <summary>
            	Defines the current Context as the be accessed by an alias
            </summary>
        </member>
        <member name="F:Morestachio.Framework.TokenType.VariableSet">
            <summary>
            	Defines the current Context as the be accessed by an alias
            </summary>
        </member>
        <member name="T:Morestachio.Helper.AsyncHelper">
            <summary>
            A Helper class to run Asynchronous functions from synchronous ones
            </summary>
        </member>
        <member name="M:Morestachio.Helper.AsyncHelper.UnpackFormatterTask(System.Object)">
            <summary>
                Unpacks the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Morestachio.Helper.AsyncHelper.AsyncBridge">
            <summary>
            A class to bridge synchronous asynchronous methods
            </summary>
        </member>
        <member name="M:Morestachio.Helper.AsyncHelper.AsyncBridge.#ctor">
            <summary>
            Constructs the AsyncBridge by capturing the current
            SynchronizationContext and replacing it with a new
            ExclusiveSynchronizationContext.
            </summary>
        </member>
        <member name="M:Morestachio.Helper.AsyncHelper.AsyncBridge.Run(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Execute's an async task with a void return type
            from a synchronous context
            </summary>
            <param name="task">Task to execute</param>
            <param name="callback">Optional callback</param>
        </member>
        <member name="M:Morestachio.Helper.AsyncHelper.AsyncBridge.Run``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Execute's an async task with a T return type
            from a synchronous context
            </summary>
            <typeparam name="T">The type of the task</typeparam>
            <param name="task">Task to execute</param>
            <param name="callback">Optional callback</param>
        </member>
        <member name="M:Morestachio.Helper.AsyncHelper.AsyncBridge.Run``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            Execute's an async task with a T return type
            from a synchronous context
            </summary>
            <typeparam name="T">The type of the task</typeparam>
            <param name="task">Task to execute</param>
            <param name="callback">
            The callback function that uses the result of the task
            </param>
        </member>
        <member name="M:Morestachio.Helper.AsyncHelper.AsyncBridge.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:Morestachio.Helper.AsyncHelper.Wait">
            <summary>
            Creates a new AsyncBridge. This should always be used in
            conjunction with the using statement, to ensure it is disposed
            </summary>
        </member>
        <member name="M:Morestachio.Helper.AsyncHelper.FireAndForget(System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
            Runs a task with the "Fire and Forget" pattern using Task.Run,
            and unwraps and handles exceptions
            </summary>
            <param name="task">A function that returns the task to run</param>
            <param name="handle">Error handling action, null by default</param>
        </member>
        <member name="T:Morestachio.Helper.Number">
            <summary>
            	Encapsulates a late bound number
            </summary>
        </member>
        <member name="P:Morestachio.Helper.Number.Value">
            <summary>
            	Contains the numeric value
            </summary>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.Int64)">
            <summary>
            	Creates an new Integral number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.UInt64)">
            <summary>
            	Creates an new Integral number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.Int32)">
            <summary>
            	Creates an new Integral number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.UInt32)">
            <summary>
            	Creates an new Integral number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.Byte)">
            <summary>
            	Creates an new Integral number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.SByte)">
            <summary>
            	Creates an new Integral number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.Int16)">
            <summary>
            	Creates an new Integral number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.UInt16)">
            <summary>
            	Creates an new Integral number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.Single)">
            <summary>
            	Creates an new floating number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.Double)">
            <summary>
            	Creates an new floating number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.#ctor(System.Decimal)">
            <summary>
            	Creates an new floating number
            </summary>
            <param name="fullNumber"></param>
        </member>
        <member name="M:Morestachio.Helper.Number.TryParse(System.String,Morestachio.Helper.Number@)">
            <summary>
            	Tries to parse the input to any number folloring roughly the rules of msbuild.
            	Like:
            	Has Suffix? (u,l,f,d)
            	Has Prefix? (0x)
            	Is int?
            	Is long?
            	Is Double?
            	Is sbyte?
            	Is ushort?
            	Is decimal?
            </summary>
            <param name="input"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Helper.Number.GetTypeCode">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToBoolean(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToChar(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToSByte(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToByte(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToInt16(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToUInt16(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToInt32(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToUInt32(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToInt64(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToUInt64(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToSingle(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToDouble(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToDecimal(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToDateTime(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToString(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToType(System.Type,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.Helper.Number.ToString">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Helper.StreamExtensions">
            <summary>
                Helper class for Steam operations
            </summary>
        </member>
        <member name="M:Morestachio.Helper.StreamExtensions.Stringify(System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
                Reads all content from the Stream and returns it as a String
            </summary>
            <param name="source"></param>
            <param name="disposeOriginal"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Morestachio.InvalidPath">
            <summary>
            	Delegate for the Event Handler in <see cref="E:Morestachio.ParserOptions.UnresolvedPath"/>
            </summary>
            <param name="path"></param>
            <param name="type"></param>
        </member>
        <member name="T:Morestachio.IValueResolver">
            <summary>
            	Can be used to extract a value from an object that is not natively supported such as IDictionary{string, object} or object.
            	for example: This could be used to resolve Newtonesofts JObject
            </summary>
        </member>
        <member name="M:Morestachio.IValueResolver.Resolve(System.Type,System.Object,System.String,Morestachio.Framework.ContextObject)">
             <summary>
            	Should return ether NULL or an object as result.
            	this CAN return a Task that has a result. The task will be awaited if needed.
             </summary>
             <param name="type"></param>
             <param name="value"></param>
             <param name="path"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Morestachio.IValueResolver.CanResolve(System.Type,System.Object,System.String,Morestachio.Framework.ContextObject)">
             <summary>
            		Will be called for each lookup. If returns false the default logic will kick in otherwise morestachio will call <see cref="M:Morestachio.IValueResolver.Resolve(System.Type,System.Object,System.String,Morestachio.Framework.ContextObject)"/> to obtain the value from path
             </summary>
             <param name="type"></param>
             <param name="value"></param>
             <param name="path"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="T:Morestachio.MorestachioDocumentInfo">
            <summary>
                Provided when parsing a template and getting information about the embedded variables.
            </summary>
        </member>
        <member name="M:Morestachio.MorestachioDocumentInfo.#ctor(Morestachio.ParserOptions,Morestachio.Document.Contracts.IDocumentItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.MorestachioDocumentInfo"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="document">The document.</param>
        </member>
        <member name="P:Morestachio.MorestachioDocumentInfo.Document">
            <summary>
            	The Morestachio Document generated by the <see cref="T:Morestachio.Parser"/>
            </summary>
        </member>
        <member name="P:Morestachio.MorestachioDocumentInfo.ParserOptions">
            <summary>
                The parser Options object that was used to create the Template Delegate
            </summary>
        </member>
        <member name="P:Morestachio.MorestachioDocumentInfo.Errors">
            <summary>
            	Gets a list of errors occured while parsing the Template
            </summary>
        </member>
        <member name="M:Morestachio.MorestachioDocumentInfo.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
                Calls the Underlying Template Delegate and Produces a Stream
            </summary>
            <param name="data"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.MorestachioDocumentInfo.CreateAsync(System.Object)">
            <summary>
                Calls the Underlying Template Delegate and Produces a Stream
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.MorestachioDocumentInfo.CreateAndStringifyAsync(System.Object)">
            <summary>
                Calls the Underlying Template Delegate and Produces a Stream
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.MorestachioDocumentInfo.CreateAndStringifyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
                Calls the Underlying Template Delegate and Produces a Stream
            </summary>
            <param name="source"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.MorestachioDocumentInfo.Create(System.Object,System.Threading.CancellationToken)">
            <summary>
                Calls the Underlying Template Delegate and Produces a Stream
            </summary>
            <param name="source"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.MorestachioDocumentInfo.Create(System.Object)">
            <summary>
                Calls the Underlying Template Delegate and Produces a Stream
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.MorestachioDocumentInfo.CreateAndStringify(System.Object)">
            <summary>
                Calls the Underlying Template Delegate and Produces a Stream
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.MorestachioDocumentInfo.CreateAndStringify(System.Object,System.Threading.CancellationToken)">
            <summary>
                Calls the Underlying Template Delegate and Produces a Stream
            </summary>
            <param name="source"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Morestachio.MorestachioDocumentResult">
            <summary>
            	The Compiled template
            </summary>
        </member>
        <member name="P:Morestachio.MorestachioDocumentResult.Stream">
            <summary>
            	The Result of the CreateAsync call
            </summary>
        </member>
        <member name="T:Morestachio.MorestachioRuntimeException">
            <summary>
            	An Exception that occured on Runtime
            </summary>
        </member>
        <member name="M:Morestachio.MorestachioRuntimeException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.Parser">
            <summary>
                The main entry point for this library. Use the static "Parse" methods to create template functions.
                Functions are safe for reuse, so you may parse and cache the resulting function.
            </summary>
        </member>
        <member name="M:Morestachio.Parser.ParseWithOptions(Morestachio.ParserOptions)">
            <summary>
                Parses the Template with the given options
            </summary>
            <param name="parsingOptions">a set of options</param>
            <returns></returns>
        </member>
        <member name="M:Morestachio.Parser.Parse(System.Collections.Generic.Queue{Morestachio.Framework.TokenPair},Morestachio.ParserOptions)">
            <summary>
                Parses the Tokens into a Document.
            </summary>
            <param name="tokens">The tokens.</param>
            <returns></returns>
        </member>
        <member name="T:Morestachio.ParserErrors.CharacterLocationExtended">
            <summary>
            	Defines a line within the template and the char that should be marked
            </summary>
        </member>
        <member name="P:Morestachio.ParserErrors.CharacterLocationExtended.Line">
            <summary>
            	The line of the Template
            </summary>
        </member>
        <member name="P:Morestachio.ParserErrors.CharacterLocationExtended.Character">
            <summary>
            	The Character at the <see cref="P:Morestachio.ParserErrors.CharacterLocationExtended.Line"/>
            </summary>
        </member>
        <member name="P:Morestachio.ParserErrors.CharacterSnippedLocation.Line">
            <summary>
            	The line of the Template
            </summary>
        </member>
        <member name="P:Morestachio.ParserErrors.CharacterSnippedLocation.Character">
            <summary>
            	The Character at the <see cref="P:Morestachio.ParserErrors.CharacterSnippedLocation.Line"/>
            </summary>
        </member>
        <member name="T:Morestachio.ParserErrors.IMorestachioError">
            <summary>
            	Defines a Error while parsing a Template
            </summary>
        </member>
        <member name="P:Morestachio.ParserErrors.IMorestachioError.Location">
            <summary>
            	The location within the Template where the error occured
            </summary>
        </member>
        <member name="M:Morestachio.ParserErrors.IMorestachioError.GetException">
            <summary>
            Gets the exception.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Morestachio.ParserErrors.IMorestachioError.HelpText">
            <summary>
            	Gets a string that describes the Error
            </summary>
        </member>
        <member name="T:Morestachio.ParserErrors.InvalidPathSyntaxError">
            <summary>
            	Defines an Error on a position within the Template.
            </summary>
        </member>
        <member name="P:Morestachio.ParserErrors.InvalidPathSyntaxError.Location">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.ParserErrors.InvalidPathSyntaxError.Token">
            <summary>
            Gets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="M:Morestachio.ParserErrors.InvalidPathSyntaxError.#ctor(Morestachio.ParserErrors.CharacterLocationExtended,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.ParserErrors.InvalidPathSyntaxError.GetException">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.ParserErrors.InvalidPathSyntaxError.HelpText">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.ParserErrors.MorestachioSyntaxError">
            <summary>
            	Defines an error that occured when parsing the template that has an invalid token
            </summary>
        </member>
        <member name="M:Morestachio.ParserErrors.MorestachioSyntaxError.#ctor(Morestachio.ParserErrors.CharacterLocationExtended,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.ParserErrors.MorestachioSyntaxError"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="P:Morestachio.ParserErrors.MorestachioSyntaxError.Location">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.ParserErrors.MorestachioSyntaxError.GetException">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.ParserErrors.MorestachioSyntaxError.HelpText">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.ParserErrors.MorestachioUnopendScopeError">
            <summary>
            	Defines an error that occured when parsing the template that has an invalid token
            </summary>
        </member>
        <member name="M:Morestachio.ParserErrors.MorestachioUnopendScopeError.#ctor(Morestachio.ParserErrors.CharacterLocationExtended,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.ParserErrors.MorestachioSyntaxError"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="P:Morestachio.ParserErrors.MorestachioUnopendScopeError.Location">
            <inheritdoc />
        </member>
        <member name="M:Morestachio.ParserErrors.MorestachioUnopendScopeError.GetException">
            <inheritdoc />
        </member>
        <member name="P:Morestachio.ParserErrors.MorestachioUnopendScopeError.HelpText">
            <inheritdoc />
        </member>
        <member name="T:Morestachio.ParserOptions">
            <summary>
                Options for Parsing run
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.PartialsStore">
            <summary>
            	The store for PreParsed Partials
            </summary>
        </member>
        <member name="M:Morestachio.ParserOptions.#ctor(System.String)">
            <summary>
                ctor
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:Morestachio.ParserOptions.#ctor(System.String,System.Func{System.IO.Stream})">
            <summary>
                ctor
            </summary>
            <param name="template"></param>
            <param name="sourceStream">The factory that is used for each template generation</param>
        </member>
        <member name="M:Morestachio.ParserOptions.#ctor(System.String,System.Func{System.IO.Stream},System.Text.Encoding)">
            <summary>
                Initializes a new instance of the <see cref="T:Morestachio.ParserOptions" /> class.
            </summary>
            <param name="template">The template.</param>
            <param name="sourceStream">The source stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Morestachio.ParserOptions.#ctor(System.String,System.Func{System.IO.Stream},System.Text.Encoding,System.Int64,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Morestachio.ParserOptions" /> class.
            </summary>
            <param name="template">The template.</param>
            <param name="sourceStream">The source stream.</param>
            <param name="encoding">The encoding.</param>
            <param name="maxSize">The maximum size.</param>
            <param name="disableContentEscaping">if set to <c>true</c> [disable content escaping].</param>
            <param name="withModelInference">if set to <c>true</c> [with model inference].</param>
        </member>
        <member name="M:Morestachio.ParserOptions.#ctor(System.String,System.Func{System.IO.Stream},System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Morestachio.ParserOptions" /> class.
            </summary>
            <param name="template">The template.</param>
            <param name="sourceStream">The source stream.</param>
            <param name="encoding">The encoding.</param>
            <param name="disableContentEscaping">if set to <c>true</c> [disable content escaping].</param>
            <param name="withModelInference">if set to <c>true</c> [with model inference].</param>
        </member>
        <member name="P:Morestachio.ParserOptions.CustomDocumentItemProviders">
            <summary>
            	The list of provider that emits custom document items
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.LegacyFormatterResolving">
            <summary>
            	Enables the Legacy resolver for Formatters names that formatters should contain the name of the formatter as the first argument.
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.ProfileExecution">
            <summary>
            	If set to True morestachio will profile the execution and report the result in both <seealso cref="T:Morestachio.MorestachioDocumentInfo"/> and <seealso cref="!:"/>
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.ValueResolver">
            <summary>
            	Can be used to resolve values from custom objects
            </summary>
        </member>
        <member name="E:Morestachio.ParserOptions.UnresolvedPath">
            <summary>
            	Can be used to observe unresolved paths
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.Formatters">
            <summary>
                Adds an Formatter overwrite or new Formatter for an Type
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.PartialStackSize">
            <summary>
            	Gets or sets the max Stack size for nested Partials in execution. Recommended to be not exceeding 2000. Defaults to 255.
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.StackOverflowBehavior">
            <summary>
            	Defines how the Parser should behave when encountering a the PartialStackSize to be exceeded.
            	Default is <see cref="F:Morestachio.ParserOptions.PartialStackOverflowBehavior.FailWithException"/>
            </summary>
        </member>
        <member name="T:Morestachio.ParserOptions.PartialStackOverflowBehavior">
            <summary>
            	Defines how the Parser should behave when encountering a the PartialStackSize to be exceeded
            </summary>
        </member>
        <member name="F:Morestachio.ParserOptions.PartialStackOverflowBehavior.FailWithException">
            <summary>
            	Throw a <see cref="T:Morestachio.Framework.MustachioStackOverflowException"/>
            </summary>
        </member>
        <member name="F:Morestachio.ParserOptions.PartialStackOverflowBehavior.FailSilent">
            <summary>
            	Do nothing and skip further calls
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.Timeout">
            <summary>
            	Gets or sets the timeout. After the timeout is reached and the Template has not finished Processing and Exception is thrown.
            	For no timeout use <code>TimeSpan.Zero</code>
            </summary>
            <value>
            The timeout.
            </value>
        </member>
        <member name="P:Morestachio.ParserOptions.Template">
            <summary>
                The template content to parse.
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.DisableContentEscaping">
            <summary>
                In some cases, content should not be escaped (such as when rendering text bodies and subjects in emails).
                By default, we use no content escaping, but this parameter allows it to be enabled. Default is False
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.WithModelInference">
            <summary>
                Parse the template, and capture paths used in the template to determine a suitable structure for the required
                model. Default is False
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.MaxSize">
            <summary>
                Defines a Max size for the Generated Template.
                Zero for unlimited
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.SourceFactory">
            <summary>
                SourceFactory can be used to create a new stream for each template. Default is
                <code>() => new MemoryStream()</code>
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.Encoding">
            <summary>
                In what encoding should the text be written
                Default is <code>Encoding.Utf8</code>
            </summary>
        </member>
        <member name="P:Morestachio.ParserOptions.Null">
            <summary>
                Defines how NULL values are exposed to the Template default is <code>String.Empty</code>
            </summary>
        </member>
        <member name="T:Morestachio.ScopeData">
            <summary>
            	Hosts all infos about the current execution path of a part in the Template.
            	Can be used for future parallel execution
            </summary>
        </member>
        <member name="M:Morestachio.ScopeData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Morestachio.ScopeData"/> class.
            </summary>
        </member>
        <member name="P:Morestachio.ScopeData.Partials">
            <summary>
            	List of all Partials
            </summary>
        </member>
        <member name="P:Morestachio.ScopeData.PartialDepth">
            <summary>
            	The Depth of current Partial usage
            </summary>
        </member>
        <member name="P:Morestachio.ScopeData.Alias">
            <summary>
            	Lists all Alias objects
            </summary>
        </member>
        <member name="P:Morestachio.ScopeData.CustomData">
            <summary>
            	Can be used by 3rd party document items to store data.
            	If it contains an IDisposable it will be disposed after the execution is finished.
            </summary>
        </member>
        <member name="P:Morestachio.ScopeData.ExecuteElse">
            <summary>
            	Will be set by any preceding If statement if the expression was not rendered to true
            </summary>
        </member>
        <member name="M:Morestachio.ScopeData.Dispose">
            <inheritdoc />
        </member>
    </members>
</doc>
